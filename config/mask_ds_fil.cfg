# Read in a filterbank file, remove bandpass and zerodm, and downsample the data.

[data]
fil_file = spliced_blc00010203040506o7o01113141516o7o0212223242526o7o031323334353637_guppi_58705_14221_BLGCsurvey_Cband_C12_0060.rawspec.8.0003.fil  ; Filterbank file to load
DATA_DIR = /pylon5/phy200034p/akshay2/BLGC/Data ; Path to .fil file

[output]
basename = guppi_58705_14221_BLGCsurvey_Cband_C12_0060 ; Basename of output products
write_format = ; Output format of final downsampled data product (npz/fil) (d: npz)
# Path to which output products must be saved, will be created if non-existent. (d: DATA_DIR)
OUTPUT_DIR = /pylon5/phy200034p/akshay2/BLGC/Dynspec

[dedispersion]
DM = ; At what DM do you want to dedisperse the data prior to smoothing? (d: 0.)

[serial_blocks]
N_blocks = 50; No. of data blocks to be processed serially by each child processor. (d: 1)

[band_edges]
freq_band_low = 4.39 ; Lowest frequency (GHz) to be considered.
freq_band_high = 7.81 ; Highest frequency (GHz) to be considered.

# Polarization index to extract (0 = Stokes-I, 1 = Stokes-Q, 2 = Stokes-U, 3 = Stokes-V).
[polarization]
pol =             ; (d: 0)

[rfimask]
rfimask = guppi_58705_14221_BLGCsurvey_Cband_C12_0060_rfifind.mask ; Rfifind mask to be applied on data
RFIMASK_DIR = /pylon5/phy200034p/akshay2/BLGC/Rfimask ; Path to rfi_mask (d: DATA_DIR)

[bandpass]
bandpass_method = file ; compute/file (Compute median bandpass from loaded data, or load pre-computed bandpass from a .npz file.)
# compute option advisable only for small data sets. For large data sets, precimpute the bandpass using calc_bandpass.py
bandpass_npz = guppi_58705_14221_BLGCsurvey_Cband_C12_0060_bandpass.npz ; Name of .npz file containing pre-computed bandpass
BANDPASS_DIR = /pylon5/phy200034p/akshay2/BLGC/Bandpass ; Path to bandpass_npz (d: DATA_DIR)

[zerodm]
remove_zerodm = True; Apply zerodm removal? (True/False) (d: False)

# Smoothing parameters
[smoothing]
smoothing_method = Blockavg2D      ; Available methods: hanning, hamming, blackman, Gaussian2D, Blockavg2D (d: Blockavg2D)
convolution_method = fftconvolve   ; Use fftconvolve or fft2 for performing convolution. (d: fftconvolve)
kernel_size_freq_chans = 128      ; No. of channels constituting a spectral kernel (Gaussian FWHM / window length)
kernel_size_time_samples = 8      ; No. of samples constituting a temporal kernel (Gaussian FWHM / window length)
